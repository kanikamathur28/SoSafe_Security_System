package controlPanel;

/*
 * @author Ashlesha Lapalkar
 * @version 1.1
 */

import installCode.BldgComponent;
import installCode.Welcome;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.media.Player;

import scheduleObservingStrategies.*;
import scheduleObservingStrategies.Schedule.ScheduleBuilder;
import sensorFactory.MotionSensor;
import sensorFactory.Sensor;
import sensorFactory.TempSensor;
import systemSecurity.User;
import systems.*;

import org.jdesktop.swingx.JXDatePicker;

import simulator.AlarmRinger;
import simulator.SimulatorGUI;
import installCode.*;
import installCode.Customer.CustBuilder;

import javax.swing.*;


public class SysConfigPanel extends javax.swing.JFrame {
	
	List<Sensor> sensorList;
	Map<Integer, Sensor> motionSensorMap;
	Map<Integer, Sensor>  tempSensorMap;
	ScheduleBuilder builder;
	MainSystem sys;
	boolean fireAlarm, secAlarm, addUser, zone;
	List<Sensor> tempSensorList, motionSensorList;
	String userInfo;
	List<BldgComponent>secARoomList, secBRoomList;
	AlarmRinger ringer;

	/**
     * Creates new form NewJFrame
     */
    public SysConfigPanel() {
        initComponents();
    }

    public SysConfigPanel( Map<Integer, Sensor> tempSensorMap, Map<Integer, Sensor> motionSensorMap,
    		ScheduleBuilder builder, MainSystem sys, List<BldgComponent> secAList, 
    		List<BldgComponent> secBList) {
    	this.motionSensorMap  = motionSensorMap;
    	this.tempSensorMap = tempSensorMap;
    	this.builder = builder;
    	this.sys = sys;
    	this.sensorList = sys.getInstalledSensors();
    	this.secARoomList = secAList;
    	this.secBRoomList = secBList;
    	ringer = new AlarmRinger();
    	initComponents();
    	
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new JPanel();
        timerSchedPanel = new JPanel();
        schedularLbl = new JLabel();
        startTimeCombo = new JComboBox();
        endTimeCombo = new JComboBox();
        startDateCombo = new JComboBox();
        startTimeLbl = new JLabel();
        endTimeLbl = new JLabel();
        startDateLbl = new JLabel();
        schedSaveBtn = new JButton();
        configPanel = new JPanel();
        textField = new HintTextField("Enter passcode and press enter.");
        fireBtn = new JButton();
        securityBtn = new JButton();
        zoneBtn = new JButton();
        armBtn = new JButton();
        disarmBtn = new JButton();
        configBtn = new JButton();
        enterBtn = new JButton();
        sysTimePanel = new JPanel();
        onRdBtn = new JRadioButton();
        offRdBtn = new JRadioButton();
        malfunctionRdBtn = new JRadioButton();
        sysTimeLbl = new JLabel();
        numPadPanel = new JPanel();
        num1Btn = new JButton();
        num2Btn = new JButton();
        num3Btn = new JButton();
        num4Btn = new JButton();
        num5Btn = new JButton();
        num6Btn = new JButton();
        num7Btn = new JButton();
        num8Btn = new JButton();
        num9Btn = new JButton();
        saveUserBtn = new JButton();
        addUserBtn = new JButton();
        num0Btn = new JButton();
        endDateLbl = new JLabel();
        endDateCombo = new JComboBox();
        scheduleMenuLbl = new JLabel();
        scheduleMenuCombo = new JComboBox();
        buttonGroup1 = new ButtonGroup();
        refreshBtn = new JButton();
        simulateBtn = new JButton();
        jComboBox6 = new JComboBox<>();
        jComboBox7 = new JComboBox<>();
       refreshFireList = new JButton("Refresh");
        refreshSecList = new JButton("Refresh");
        
        addUserBtn.setEnabled(false);
        saveUserBtn.setEnabled(false);
        scheduleMenuCombo.setEnabled(false);
        schedSaveBtn.setEnabled(false);
        refreshFireList.setEnabled(false);
        refreshSecList.setEnabled(false);
        jComboBox6.setEnabled(false);
        jComboBox7.setEnabled(false);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        setForeground(new java.awt.Color(153, 153, 153));
        setMaximumSize(new java.awt.Dimension(717, 405));
        setMinimumSize(new java.awt.Dimension(717, 405));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBackground(new Color(152, 175, 199));
        mainPanel.setMaximumSize(new java.awt.Dimension(697, 383));
        mainPanel.setMinimumSize(new java.awt.Dimension(697, 383));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        timerSchedPanel.setLayout(new java.awt.GridBagLayout());
        timerSchedPanel.setBackground(new Color(153, 153, 153));

        schedularLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        schedularLbl.setText("Scheduler");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 0, 0);
        timerSchedPanel.add(schedularLbl, gridBagConstraints);
        
        picker1 = new JXDatePicker();
        picker1.setDate(Calendar.getInstance().getTime());
        picker1.setFormats(new SimpleDateFormat("EEE MM/dd/yyyy"));

         startTimeCombo.setForeground(new Color(152, 175, 199));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 46, 0, 24);
        timerSchedPanel.add(picker1, gridBagConstraints);

        picker2 = new JXDatePicker();
        picker2.setDate(Calendar.getInstance().getTime());
        picker2.setFormats(new SimpleDateFormat("EEE MM/dd/yyyy"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 46, 0, 24);
        timerSchedPanel.add(picker2, gridBagConstraints);
        
        timeSpinner1 = new JSpinner( new SpinnerDateModel() );
        timeEditor = new JSpinner.DateEditor(timeSpinner1, "HH:mm");
        timeSpinner1.setEditor(timeEditor);
        timeSpinner1.setValue(new Date()); // will only show the current time

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 46, 0, 24);
        timerSchedPanel.add(timeSpinner1, gridBagConstraints);

        
        startDateLbl.setText("Start Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        timerSchedPanel.add(startDateLbl, gridBagConstraints);

        endDateLbl.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        timerSchedPanel.add(endDateLbl, gridBagConstraints);

        startTimeLbl.setText("Start Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        timerSchedPanel.add(startTimeLbl, gridBagConstraints);

        schedSaveBtn.setBackground(new java.awt.Color(204, 204, 255));
        schedSaveBtn.setText("Save");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 3, 11, 0);
        timerSchedPanel.add(schedSaveBtn, gridBagConstraints);
        schedSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleSaveBtnActionPerformed(evt);
            }
        });

        endTimeLbl.setText("End Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        timerSchedPanel.add(endTimeLbl, gridBagConstraints);
        
        
        timeSpinner2 = new JSpinner( new SpinnerDateModel() );
        timeEditor2 = new JSpinner.DateEditor(timeSpinner2, "HH:mm");
        timeSpinner2.setEditor(timeEditor2);
        timeSpinner2.setValue(new Date()); // will only show the current time
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 46, 0, 24);
        timerSchedPanel.add(timeSpinner2, gridBagConstraints);

        scheduleMenuLbl.setText("Schedule Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 0, 0);
        timerSchedPanel.add(scheduleMenuLbl, gridBagConstraints);

        scheduleMenuCombo.setModel(new DefaultComboBoxModel(new String[] { "All days", "Weekday", "Weekend"}));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 46, 0, 24);
        timerSchedPanel.add(scheduleMenuCombo, gridBagConstraints);



        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 11, 37);
        mainPanel.add(timerSchedPanel, gridBagConstraints);

        configPanel.setMaximumSize(new java.awt.Dimension(418, 150));
        configPanel.setMinimumSize(new java.awt.Dimension(418, 150));
        configPanel.setLayout(new java.awt.GridBagLayout());
        configPanel.setBackground(new Color(153, 153, 153));

        textField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textField.setHorizontalAlignment(JTextField.LEADING);
        textField.setPreferredSize(new Dimension(200,21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 210;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 36, 0, 0);
        configPanel.add(textField, gridBagConstraints);

        armBtn.setBackground(new java.awt.Color(204, 204, 255));
        armBtn.setText("Arm");
        armBtn.setMaximumSize(new java.awt.Dimension(83, 23));
        armBtn.setMinimumSize(new java.awt.Dimension(83, 23));
        armBtn.setPreferredSize(new java.awt.Dimension(83, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 36, 0, 0);
        configPanel.add(armBtn, gridBagConstraints);
        armBtn.setEnabled(false);
        armBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                armBtnActionPerformed(evt);
            }
        });

        disarmBtn.setBackground(new java.awt.Color(204, 204, 255));
        disarmBtn.setText("Disarm");
        disarmBtn.setMaximumSize(new java.awt.Dimension(83, 23));
        disarmBtn.setMinimumSize(new java.awt.Dimension(83, 23));
        disarmBtn.setPreferredSize(new java.awt.Dimension(83, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 48, 0, 0);
        configPanel.add(disarmBtn, gridBagConstraints);
        disarmBtn.setEnabled(false);
        disarmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disarmBtnActionPerformed(evt);
            }
        });

        configBtn.setBackground(new java.awt.Color(204, 204, 255));
        configBtn.setText("Options");
        configBtn.setPreferredSize(new Dimension(85, 23));
        configBtn.setMinimumSize(new Dimension(85, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 48, 0, 35);
        configPanel.add(configBtn, gridBagConstraints);
        configBtn.setEnabled(false);
        configBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configBtnActionPerformed(evt);
            }
        });
       

        fireBtn.setBackground(new java.awt.Color(204, 204, 255));
        fireBtn.setText("Fire");
        fireBtn.setMaximumSize(new java.awt.Dimension(83, 23));
        fireBtn.setMinimumSize(new java.awt.Dimension(83, 23));
        fireBtn.setPreferredSize(new java.awt.Dimension(83, 23));
        fireBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 38, 27, 0);
        fireBtn.setEnabled(false);
        configPanel.add(fireBtn, gridBagConstraints);

        securityBtn.setBackground(new java.awt.Color(204, 204, 255));
        securityBtn.setText("Security");
        securityBtn.setMaximumSize(new java.awt.Dimension(83, 23));
        securityBtn.setMinimumSize(new java.awt.Dimension(83, 23));
        securityBtn.setPreferredSize(new java.awt.Dimension(83, 23));
        securityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 48, 27, 0);
        securityBtn.setEnabled(false);
        configPanel.add(securityBtn, gridBagConstraints);

        zoneBtn.setBackground(new java.awt.Color(204, 204, 255));
        zoneBtn.setText("Zone");
        zoneBtn.setPreferredSize(new Dimension(83, 23));
        zoneBtn.setMinimumSize(new Dimension(83, 23));
        zoneBtn.setMaximumSize(new Dimension(83, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 48, 27, 35);
        configPanel.add(zoneBtn, gridBagConstraints);
        zoneBtn.setEnabled(false);
        zoneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoneBtnActionPerformed(evt);
            }
        });

        enterBtn.setBackground(new java.awt.Color(204, 204, 255));
        enterBtn.setText("Enter");
        enterBtn.setPreferredSize(new Dimension(60,23));
        enterBtn.setMaximumSize(new Dimension(60, 23));
        enterBtn.setMinimumSize(new Dimension(60, 23));
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 48, 0, 35);
        configPanel.add(enterBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -194;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 36, 0, 0);
        mainPanel.add(configPanel, gridBagConstraints);

        sysTimePanel.setBackground(new Color(152, 175, 199));
        sysTimePanel.setMaximumSize(new java.awt.Dimension(200, 150));
        sysTimePanel.setMinimumSize(new java.awt.Dimension(200, 150));
        sysTimePanel.setPreferredSize(new Dimension(200, 150));
        sysTimePanel.setLayout(new java.awt.GridBagLayout());

        onRdBtn.setBackground(new java.awt.Color(204, 204, 255));
        buttonGroup1.add(onRdBtn);
        onRdBtn.setText("On");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(70, 6, 0, 0);
        sysTimePanel.add(onRdBtn, gridBagConstraints);

        offRdBtn.setBackground(new java.awt.Color(204, 204, 255));
        buttonGroup1.add(offRdBtn);
        offRdBtn.setSelected(false);
        offRdBtn.setText("Off");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 0, 0);
        sysTimePanel.add(offRdBtn, gridBagConstraints);

        malfunctionRdBtn.setBackground(new java.awt.Color(204, 204, 255));
        buttonGroup1.add(malfunctionRdBtn);
        malfunctionRdBtn.setText("Malfunctioning");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 7, 99);
        sysTimePanel.add(malfunctionRdBtn, gridBagConstraints);
        
        Calendar now = Calendar.getInstance();
        new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Calendar now = Calendar.getInstance();
                sysTimeLbl.setText(dateFormat.format(now.getTime()));
            }
        }).start();
        
        sysTimeLbl.setText(dateFormat.format(now.getTime()));
        sysTimeLbl.setPreferredSize(new Dimension(150, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        sysTimePanel.add(sysTimeLbl, gridBagConstraints);
        
        refreshBtn.setText("Refresh Status");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 6, 0, 0);
        sysTimePanel.add(refreshBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 0, 37);
        mainPanel.add(sysTimePanel, gridBagConstraints);

        numPadPanel.setBackground(new Color(152, 175, 199));
        numPadPanel.setMaximumSize(new java.awt.Dimension(418, 381));
        numPadPanel.setMinimumSize(new java.awt.Dimension(418, 381));
        numPadPanel.setLayout(new java.awt.GridBagLayout());

        num1Btn.setBackground(new java.awt.Color(204, 204, 255));
        num1Btn.setText("1");
        num1Btn.setPreferredSize(new Dimension(39,23));
        num1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num1BtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 103, 0, 0);
        numPadPanel.add(num1Btn, gridBagConstraints);

        num2Btn.setBackground(new java.awt.Color(204, 204, 255));
        num2Btn.setText("2");
        num2Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 2, 0, 0);
        numPadPanel.add(num2Btn, gridBagConstraints);
        num2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num2BtnActionPerformed(evt);
            }
        });

        num3Btn.setBackground(new java.awt.Color(204, 204, 255));
        num3Btn.setText("3");
        num3Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 43, 0, 109);
        numPadPanel.add(num3Btn, gridBagConstraints);
        num3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num3BtnActionPerformed(evt);
            }
        });

        num4Btn.setBackground(new java.awt.Color(204, 204, 255));
        num4Btn.setText("4");
        num4Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 103, 0, 0);
        numPadPanel.add(num4Btn, gridBagConstraints);
        num4Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num4BtnActionPerformed(evt);
            }
        });

        num5Btn.setBackground(new java.awt.Color(204, 204, 255));
        num5Btn.setText("5");
        num5Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 0);
        numPadPanel.add(num5Btn, gridBagConstraints);
        num5Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num5BtnActionPerformed(evt);
            }
        });

        num6Btn.setBackground(new java.awt.Color(204, 204, 255));
        num6Btn.setText("6");
        num6Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 43, 0, 109);
        numPadPanel.add(num6Btn, gridBagConstraints);
        num6Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num6BtnActionPerformed(evt);
            }
        });

        num7Btn.setBackground(new java.awt.Color(204, 204, 255));
        num7Btn.setText("7");
        num7Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 103, 0, 0);
        numPadPanel.add(num7Btn, gridBagConstraints);
        num7Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num7BtnActionPerformed(evt);
            }
        });

        num8Btn.setBackground(new java.awt.Color(204, 204, 255));
        num8Btn.setText("8");
        num8Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 2, 0, 0);
        numPadPanel.add(num8Btn, gridBagConstraints);
        num8Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num8BtnActionPerformed(evt);
            }
        });

        num9Btn.setBackground(new java.awt.Color(204, 204, 255));
        num9Btn.setText("9");
        num9Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 43, 0, 109);
        numPadPanel.add(num9Btn, gridBagConstraints);
        num9Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num9BtnActionPerformed(evt);
            }
        });

        saveUserBtn.setBackground(new java.awt.Color(204, 204, 255));
        saveUserBtn.setText("Save");
        saveUserBtn.setPreferredSize(new java.awt.Dimension(83, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 40, 13, 109);
        numPadPanel.add(saveUserBtn, gridBagConstraints);
        saveUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               saveUserBtnActionPerformed(evt);
            }
        });

        addUserBtn.setBackground(new java.awt.Color(204, 204, 255));
        addUserBtn.setText("AddUser");
        addUserBtn.setMaximumSize(new Dimension(60,23));
        addUserBtn.setMinimumSize(new Dimension(60,23));
        addUserBtn.setPreferredSize(new Dimension(60,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 103, 13, 0);
        numPadPanel.add(addUserBtn, gridBagConstraints);
        addUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               addUserBtnActionPerformed(evt);
            }
        });
        
        simulateBtn.setBackground(new java.awt.Color(204, 204, 255));
        simulateBtn.setText("Simulate");
        simulateBtn.setMaximumSize(new Dimension(83,23));
        simulateBtn.setMinimumSize(new Dimension(83,23));
        simulateBtn.setPreferredSize(new Dimension(83,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 23, 41, 0);
        numPadPanel.add(simulateBtn, gridBagConstraints);
        simulateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               simulateBtnActionPerformed(evt);
            }
        });

        num0Btn.setText("0");
        num0Btn.setPreferredSize(new Dimension(39,23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 2, 0, 0);
        numPadPanel.add(num0Btn, gridBagConstraints);
        num0Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num0BtnActionPerformed(evt);
            }
        });
        
        jComboBox6.setModel(new DefaultComboBoxModel(new String[] { "Temp" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        numPadPanel.add(jComboBox6, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        numPadPanel.add(refreshFireList, gridBagConstraints);
        refreshFireList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	refreshFireListActionPerformed(evt);
            }
        });
        
        
        
        jComboBox7.setModel(new DefaultComboBoxModel(new String[] { "Motion" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11,120,0,0);
        numPadPanel.add(jComboBox7, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 120, 0, 0);
        numPadPanel.add(refreshSecList, gridBagConstraints);
        refreshSecList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	refreshSecListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 36, 11, 0);
        mainPanel.add(numPadPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 11, 10);
        getContentPane().add(mainPanel, gridBagConstraints);
        
        num0Btn.setEnabled(false);
        num1Btn.setEnabled(false);
        num2Btn.setEnabled(false);
        num3Btn.setEnabled(false);
        num4Btn.setEnabled(false);
        num5Btn.setEnabled(false);
        num6Btn.setEnabled(false);
        num7Btn.setEnabled(false);
        num8Btn.setEnabled(false);
        num9Btn.setEnabled(false);

        pack();
    }// </editor-fold>  
    
    private void fireBtnActionPerformed(java.awt.event.ActionEvent evt) {   
    	fireAlarm = true;
    	secAlarm = false;
        tempSensorList = new <Sensor>ArrayList();
    }
    
    private void secBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	secAlarm = true;
    	fireAlarm = false;
    	motionSensorList = new ArrayList();
    }

    private void armBtnActionPerformed(java.awt.event.ActionEvent evt) {    
    	if(fireAlarm){
    		for(Sensor sensor : tempSensorList){
    			if(sensor == null || sensor.isActivated())
    				continue;
    			sensor.activateSensor();
    			sys.addToActivatedSensorList(sensor);
    			System.out.println("Activated sensor: "+sensor.getSensorID());
    		}
    		ringer.startStoAlarm("Speech On");
    	}
    	
    	else if(secAlarm){
    		for(Sensor sensor : motionSensorList){
    			if(sensor == null || sensor.isActivated())
    				continue;
    			sensor.activateSensor();
    			sys.addToActivatedSensorList(sensor);
    		}
    		ringer.startStoAlarm("Speech On");
    	}
    	else{
    		Iterator<Sensor> iter = sensorList.iterator();
    		while(iter.hasNext()){
    			Sensor sensor = iter.next();
    			if(sensor == null || sensor.isActivated())
	    			continue;
	    		sensor.activateSensor();
	    		sys.addToActivatedSensorList(sensor);
    		}
	    	ringer.startStoAlarm("Speech On");
    	}
    	sys.setStatus(SysConstants.sysActivated);
    	onRdBtn.setSelected(true);
    	onRdBtn.setFont(new Font("Tahoma", 1, 14));
    	onRdBtn.setForeground(new Color(0, 128, 0));
    	offRdBtn.setSelected(false);
    	offRdBtn.setForeground(Color.BLACK);
    	offRdBtn.setFont(new Font("Tahoma", 0, 11));
    	resetActionFlags();
    }  
    
    private void disarmBtnActionPerformed(java.awt.event.ActionEvent evt) {   

    	if(fireAlarm){
    		for(Sensor sensor : tempSensorList){
    			if(sensor == null || !sensor.isActivated())
    				continue;
    			sensor.deactivateSensor();
    		}
    		for(int i = 0; i<tempSensorList.size();){
        		Sensor sensor = (Sensor)tempSensorList.get(i);
        		if(!sensor.isActivated()){
        			tempSensorList.remove(i);
        		}
        		else{
        			i++;
        		}
        	}
    		ringer.startStoAlarm("Speech Off");
    	}
    	
    	else if(secAlarm){
    		for(Sensor sensor : motionSensorList){
    			if(sensor == null || !sensor.isActivated())
    				continue;
    			sensor.deactivateSensor();
    		}
    		for(int i = 0; i<motionSensorList.size();){
        		Sensor sensor = (Sensor)motionSensorList.get(i);
        		if(!sensor.isActivated()){
        			motionSensorList.remove(i);
        		}
        		else{
        			i++;
        		}
        	}
    		ringer.startStoAlarm("Speech Off");
    	}
    	
    	else{
	    	List<Sensor> list = sys.getActivatedSensors();
	    	for(Sensor sensor: list){
	    		if(sensor == null || !sensor.isActivated())
    				continue;
	    		sensor.deactivateSensor();
	    	}
	    	ringer.startStoAlarm("Speech Off");
    	}
    	
    	for(int i = 0; i<sys.getActivatedSensors().size();){
    		Sensor sensor = (Sensor) sys.getActivatedSensors().get(i);
    		if(!sensor.isActivated()){
    			sys.removeFromActivatedSensorList(i);
    		}
    		else{
    			i++;
    		}
    	}
    	if(sys.getActivatedSensors().size() == 0){
    		sys.setStatus(SysConstants.sysDeactivated);
    		offRdBtn.setSelected(true);
        	offRdBtn.setForeground(Color.RED);
        	offRdBtn.setFont(new Font("Tahoma", 1, 14));
        	onRdBtn.setSelected(false);
        	onRdBtn.setForeground(Color.BLACK);
        	onRdBtn.setFont(new Font("Tahoma", 0, 11));
    	}
    	resetActionFlags();
    	
    }
    
    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	boolean login = false;
    	
    	String id = textField.getText().substring(0, 2);
    	String passCode = textField.getText().substring(2);
    	List<User> users = sys.getUserList();
    	
    	for(User user: users){
    		if(id.equals(user.getUserCode()) && passCode.equals(user.getUserPasscode())){
    			login = true;
                break;
    		}
    		else{
                login = false;
    		}
    	}
    	
    	if(id.equals(SysConstants.ADMIN_CODE) && login){
    		sys.setSystemResponseCode(passCode);
			setAdminView();
		}
    	
    	else if(login){
    		setLimitedView();
    	}
    	
    	else{
        	textField.setText("");
        }
    	
                                     
    }   
    
    private void num1BtnActionPerformed(java.awt.event.ActionEvent evt) { 
    	if(fireAlarm){
    		if(zone){
    			for(BldgComponent room : secARoomList){
    				Sensor sensor = room.getTempSensor(); 
    				tempSensorList.add(sensor);
    			}
    		}else{
	    		Sensor sensor = tempSensorMap.get(1);
	    		if(sensor == null)
	    			return;
	    		tempSensorList.add(sensor);
    		}
    	}
    	else if(secAlarm){
    		if(zone){
    			for(BldgComponent room : secARoomList){
    				Sensor sensor = room.getMotionSensor(); 
    				motionSensorList.add(sensor);
    			}
    		}else{
	    		Sensor sensor = motionSensorMap.get(1);
	    		if(sensor == null)
	    			return;
	    		motionSensorList.add(sensor);
    		}
    	}
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("1");
    	}
    } 
    
    private void num2BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm){
    		if(zone){
    			for(BldgComponent room : secBRoomList){
    				Sensor sensor = room.getTempSensor(); 
    				tempSensorList.add(sensor);
    			}
    		}else{
    		tempSensorList.add(tempSensorMap.get(2));
    		}
    	}
    	else if(secAlarm){
    		if(zone){
    			for(BldgComponent room : secBRoomList){
    				Sensor sensor = room.getMotionSensor(); 
    				motionSensorList.add(sensor);
    			}
    		}else{
    		motionSensorList.add(motionSensorMap.get(2));
    		}
    	}
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("2");
    	}
    } 
    
    private void num3BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(3));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(3));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("3");
    	}
    } 
    
    private void num4BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(4));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(4));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("4");
    	}
    } 
    
    private void num5BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(5));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(5));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("5");
    	}
    } 
    
    private void num6BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(6));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(6));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("6");
    	}
    } 

    private void num7BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(7));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(7));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("7");
    	}
    } 
    
    private void num8BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(8));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(8));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("8");
    	}
    } 
    
    private void num9BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(9));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(9));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("9");
    	}
    } 
    
    private void num0BtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	if(fireAlarm)
    		tempSensorList.add(tempSensorMap.get(0));
    	else if(secAlarm)
    		motionSensorList.add(motionSensorMap.get(0));
    	else if(addUser && userInfo.length()<10){
    		userInfo = userInfo.concat("0");
    	}
    } 
    
    private void addUserBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	addUser = true;
    	userInfo = "";
    } 
    
    private void saveUserBtnActionPerformed(java.awt.event.ActionEvent evt) { 
    	String id = userInfo.substring(0,2);
    	String passcode = userInfo.substring(2);
    	User newUser = new User(id, passcode);
    	sys.addToUserList(id, newUser);
    	BufferedWriter writer = null;
		String input = null;
		try {
			writer = new BufferedWriter(new FileWriter("customerInfo.txt", true));
			input = ";"+userInfo.substring(0,2)+";"+userInfo.substring(2);
			writer.write(input);
			writer.newLine();
			writer.close();
		}
		 catch (IOException e) {
			e.printStackTrace();
		}
		resetActionFlags();
    } 
    
    private void zoneBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	zone = true;
    } 
    
    private void simulateBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	SimulatorGUI simulate = new SimulatorGUI(sys.getActivatedSensors(), sys);
    	simulate.setVisible(true);
    }
    
    private void refreshFireListActionPerformed(java.awt.event.ActionEvent evt) {  
    	List<String> fire = new ArrayList<String>();
    	fire.add("Temp");
    	List<Sensor> sensors = sys.getActivatedSensors();
    	
    	for(Sensor sensor:sensors){
    		if(sensor.getClass().isInstance(new TempSensor())){
    			fire.add(Integer.toString(sensor.getSensorID()));
    		}
    	}
    	String[] fireList = new String[fire.size()];
    	DefaultComboBoxModel model = new DefaultComboBoxModel( fire.toArray(fireList) );
		jComboBox6.setModel(model);
    } 
    
    private void refreshSecListActionPerformed(java.awt.event.ActionEvent evt) {
    	List<String> security = new ArrayList<String>();
    	security.add("Motion");
    	List<Sensor> sensors = sys.getActivatedSensors();
    	
    	for(Sensor sensor:sensors){
    		if(sensor.getClass().isInstance(new MotionSensor())){
    			security.add(Integer.toString(sensor.getSensorID()));
    		}
    	}
    	String[] fireList = new String[security.size()];
    	DefaultComboBoxModel model = new DefaultComboBoxModel( security.toArray(fireList) );
		jComboBox7.setModel(model);
    } 
    
    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	if(sys.getStatus()!=null){
	        if(sys.getStatus().equals(SysConstants.sysActivated)){
	        	onRdBtn.setSelected(true);
	        	onRdBtn.setFont(new Font("Tahoma", 1, 14));
	        	onRdBtn.setForeground(new Color(0, 128, 0));
	        	offRdBtn.setSelected(false);
	        	offRdBtn.setForeground(Color.BLACK);
	        	offRdBtn.setFont(new Font("Tahoma", 0, 11));
	        	malfunctionRdBtn.setSelected(false);
	        	malfunctionRdBtn.setForeground(Color.BLACK);
	        	malfunctionRdBtn.setFont(new Font("Tahoma", 0, 11));
	        }
	        else if(sys.getStatus().equals(SysConstants.sysDeactivated)){
	        	offRdBtn.setSelected(true);
	        	offRdBtn.setFont(new Font("Tahoma", 1, 14));
	        	offRdBtn.setForeground(Color.RED);
	        	onRdBtn.setSelected(false);
	        	onRdBtn.setForeground(Color.BLACK);
	        	onRdBtn.setFont(new Font("Tahoma", 0, 11));
	        	malfunctionRdBtn.setSelected(false);
	        	malfunctionRdBtn.setForeground(Color.BLACK);
	        	malfunctionRdBtn.setFont(new Font("Tahoma", 0, 11));
	        }
	        else{
	        	onRdBtn.setSelected(false);
	        	onRdBtn.setForeground(Color.BLACK);
	        	onRdBtn.setFont(new Font("Tahoma", 0, 11));
	        	offRdBtn.setSelected(false);
	        	offRdBtn.setForeground(Color.BLACK);
	        	offRdBtn.setFont(new Font("Tahoma", 0, 11));
	        	malfunctionRdBtn.setSelected(true);
	        	malfunctionRdBtn.setForeground(Color.ORANGE);
	        	malfunctionRdBtn.setFont(new Font("Tahoma", 1, 14));
	        }
    	}
    }
    
    private void scheduleSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Schedule schedule = builder.startDate(dateFormat2.format(picker1.getDate()))
        					.endDate(dateFormat2.format(picker2.getDate()))
        					.startTime(timeSpinner1.getValue().toString().substring(11, 16))
        					.endTime(timeSpinner2.getValue().toString().substring(11, 16))
        					.scheduleType(scheduleMenuCombo.getSelectedItem().toString())
        					.buildSchedule();
        sys.addSchduleToList(schedule);
    }
    
    private void configBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        num0Btn.setEnabled(true);
        num1Btn.setEnabled(true);
        num2Btn.setEnabled(true);
        num3Btn.setEnabled(true);
        num4Btn.setEnabled(true);
        num5Btn.setEnabled(true);
        num6Btn.setEnabled(true);
        num7Btn.setEnabled(true);
        num8Btn.setEnabled(true);
        num9Btn.setEnabled(true);
        addUserBtn.setEnabled(true);
    	saveUserBtn.setEnabled(true);
    } 
    
 class HintTextField extends JPasswordField {
    public HintTextField(String hint) {
    	_hint = hint;
    }
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (getText().length() == 0) {
            int h = getHeight();
            ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            Insets ins = getInsets();
            FontMetrics fm = g.getFontMetrics();
            int c0 = getBackground().getRGB();
            int c1 = getForeground().getRGB();
            int m = 0xfefefefe;
            int c2 = ((c0 & m) >>> 1) + ((c1 & m) >>> 1);
            g.setColor(new Color(c2, true));
            g.drawString(_hint, ins.left, h / 2 + fm.getAscent() / 2 - 2);
        }
    }
    
    private final String _hint;
}
 
 public static void main(String args[]) {
     /* Set the Nimbus look and feel */
     //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
     /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
      */
     try {
         for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
                 UIManager.setLookAndFeel(info.getClassName());
                 break;
             }
         }
     } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     }
     //</editor-fold>

     /* Create and display the form */
     java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
             new SysConfigPanel().setVisible(true);
         }
     });
 }
 
 private void setAdminView(){
	 armBtn.setEnabled(true);
 	disarmBtn.setEnabled(true);
 	configBtn.setEnabled(true);
 	fireBtn.setEnabled(true);
 	securityBtn.setEnabled(true);
 	zoneBtn.setEnabled(true);
 	textField.setText("");
 	scheduleMenuCombo.setEnabled(true);
     schedSaveBtn.setEnabled(true);
     refreshFireList.setEnabled(true);
     refreshSecList.setEnabled(true);
     jComboBox6.setEnabled(true);
     jComboBox7.setEnabled(true);
 }
 
 private void setLimitedView(){
	 armBtn.setEnabled(true);
 	textField.setText("");
 	disarmBtn.setEnabled(false);
 	configBtn.setEnabled(false);
 	fireBtn.setEnabled(false);
 	securityBtn.setEnabled(false);
 	zoneBtn.setEnabled(false);
 	num0Btn.setEnabled(false);
     num1Btn.setEnabled(false);
     num2Btn.setEnabled(false);
     num3Btn.setEnabled(false);
     num4Btn.setEnabled(false);
     num5Btn.setEnabled(false);
     num6Btn.setEnabled(false);
     num7Btn.setEnabled(false);
     num8Btn.setEnabled(false);
     num9Btn.setEnabled(false);
     addUserBtn.setEnabled(false);
     saveUserBtn.setEnabled(false);
     schedSaveBtn.setEnabled(false);
     refreshFireList.setEnabled(true);
     refreshSecList.setEnabled(true);
     jComboBox6.setEnabled(true);
     jComboBox7.setEnabled(true);
 }
 
 private void resetActionFlags(){
	 fireAlarm = false;
	 secAlarm = false;
	 zone = false;
	 addUser = false;
 }
 
    private HintTextField textField;
    // Variables declaration - do not modify                     
    private JButton fireBtn;
    private JButton num4Btn;
    private JButton num5Btn;
    private JButton num6Btn;
    private JButton num7Btn;
    private JButton num8Btn;
    private JButton num9Btn;
    private JButton saveUserBtn;
    private JButton schedSaveBtn;
    private JButton addUserBtn;
    private JButton enterBtn;
    private JButton securityBtn;
    private JButton num0Btn;
    private JButton zoneBtn;
    private JButton armBtn;
    private JButton disarmBtn;
    private JButton configBtn;
    private JButton num1Btn;
    private JButton num2Btn;
    private JButton num3Btn;
    private JComboBox startTimeCombo;
    private JComboBox endTimeCombo;
    private JComboBox startDateCombo;
    private JLabel schedularLbl;
    private JLabel startTimeLbl;
    private JLabel endTimeLbl;
    private JLabel startDateLbl;
    private JLabel sysTimeLbl;
    private JPanel mainPanel;
    private JPanel timerSchedPanel;
    private JPanel configPanel;
    private JPanel sysTimePanel;
    private JPanel numPadPanel;
    private JRadioButton onRdBtn;
    private JRadioButton offRdBtn;
    private JRadioButton malfunctionRdBtn;
    private JComboBox endDateCombo;
    private JComboBox scheduleMenuCombo;
    private JLabel endDateLbl;
    private JLabel scheduleMenuLbl;
    final DateFormat dateFormat = new SimpleDateFormat("EEE MM/dd/yyyy HH:mm:ss");
    final DateFormat dateFormat2 = new SimpleDateFormat("EEE MM/dd/yyyy");
    private ButtonGroup buttonGroup1;
    JSpinner timeSpinner1;
    JSpinner.DateEditor timeEditor;
    JSpinner timeSpinner2;
    JSpinner.DateEditor timeEditor2;
    JXDatePicker picker1;
    JXDatePicker picker2;
    private JButton refreshBtn;  
    private JButton simulateBtn;
    private Player player;
    private JComboBox jComboBox6;
    private JComboBox jComboBox7;
    private JButton refreshFireList;
    private JButton refreshSecList;
    
    // End of variables declaration                   
}
